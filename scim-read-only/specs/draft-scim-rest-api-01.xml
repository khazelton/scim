<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="no"?>
<?rfc private="DRAFT"?>
<!DOCTYPE rfc
  SYSTEM "rfc2629.dtd">
<rfc>
  <front>
    <title>SCIM PROTOCOL</title>

    <author initials="T.D." surname="Drake" fullname="Trey Drake" role="editor">
      <organization abbrev="UnboundID">UnboundID</organization>
      <address>
        <email>trey.drake@unboundid.com</email>
      </address>
    </author>
    <author initials="C.M." surname="Mortimore" fullname="Chuck Mortimore">
      <organization abbrev="SalesForce">SalesForce</organization>
      <address>
        <email>cmortimore@salesforce.com</email>
      </address>
    </author>
    <author initials="M.A." surname="Ansari" fullname="Morteza Ansari">
      <organization abbrev="Cisco">Cisco</organization>
      <address>
        <email>morteza.ansari@webex.com</email>
      </address>
    </author>

    <date month="May" year="2011"/>
    <keyword>SCIM</keyword>
    <abstract>
      <t>
        The Simple Cloud Identity Management (SCIM) specification is designed to
        make managing user identity in cloud based applications and services
        easier. The specification suite seeks to build upon experience with
        existing schemas and deployments, placing specific emphasis on
        simplicity of development and integration, while applying existing
        authentication, authorization, and privacy models. It's intent is to
        reduce the cost and complexity of user management operations by
        providing a common user schema and extension model, as well as binding
        documents to provide patterns for exchanging this schema using standard
        protocols. In essence, make it fast, cheap, and easy to move users in
        to, out of, and around the cloud.
      </t>
    </abstract>
  </front>


  <middle>
    <section title="Introduction and Overview" anchor="intro" toc="default">
      <t>The SCIM Protocol is an application-level, REST protocol for
        provisioning and managing user identity on the web. The protocol
        supports creating, editing, deleting, querying and retrieving Users and
        Groups as well as simple password change requests.
      </t>

      <section title="Intended Audience" toc="default">
        <t>
          This document is intended as a guide to SCIM API usage for both
          identity Service Providers and Consumers.
        </t>
      </section>
      <section title="Notational Conventions" anchor="notat" toc="default">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in [RFC2119].

          These keywords are capitalized when used to unambiguously specify
          requirements of the protocol or application features and behavior that
          affect the interoperability and security of implementations. When
          these words are not capitalized, they are meant in their
          natural-language sense
        </t>

        <t>
          For purposes of readability examples are not URL encoded. Implementers
          MUST percent encode URLs as described in
          <eref
            target="http://tools.ietf.org/html/rfc3986#section-2
          .1">RFC3896 2.1
          </eref>
        </t>
      </section>
      <section title="Definitions" anchor="defs" toc="default">
        <list style="hanging">
          <t hangText="Service Provider:">A web application that provides
            identity information via the SCIM protocol.
          </t>
          <t hangText="Consumer:">A website or application that uses the SCIM
            protocol to manage identity managed by the Service Provider.
          </t>
          <t hangText="Base URL:">The SCIM REST API is always relative to a Base
            URL for the API. The Base URL MUST NOT contain a query string, as
            additional path information and query string variables MAY be
            appended by Consumers as part of forming the request. Example:
            https://example.com/scim/v1/
          </t>
          <t hangText="Singular Attribute:">A Resource attribute that can appear
            at most once per Resource, e.g.displayName.
          </t>
          <t hangText="Plural Attribute:">A Resource attribute that can appear
            multiple times per Resource, e.g. emails
          </t>
          <t hangText="Simple Attribute:">A Singular or Plural attribute whose
            value is a single attribute.
          </t>
          <t hangText="Complex Attribute:">A Singular or Plural attribute whose
            value is an object containing multiple sub-attribute attributes.
          </t>
          <t hangText="Sub-Attribute:">An attribute contained by a Complex
            Attribute.
          </t>
          <t hangText="Resource:">The Service Provider managed artifact; e.g.,
            User or Group
          </t>
        </list>
      </section>
    </section>

    <section title="Authentication and Authorization" anchor="aa" toc="default">
      <t>
        The SCIM protocol does not define a scheme for authentication and
        authorization therefore implementers are free to choose mechanisms
        appropriate to their use cases. The choice of authentication mechanism
        will impact interoperability. It is RECOMMENDED that clients be
        implemented in such a way that new authentication schemes can be
        deployed. Implementers SHOULD support existing
        authentication/authorization schemes. In particular,
        <eref target="http://tools
        .ietf.org/html/draft-ietf-oauth-v2-16">
          OAuth2
        </eref>
        is RECOMMENDED. Appropriate security considerations of the selected
        authentication and authorization schemes SHOULD be taken.

        Because this protocol uses HTTP response status codes as the primary
        means of reporting the result of a request, servers are advised to
        respond to unauthorized or unauthenticated requests using the 401
        response code in accordance with section 10.4.2 of<eref
        target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2">
        RFC2616
      </eref>.
      </t>
      <t>
        All examples assume OAuth2; e.g.,
      </t>
      <figure height="" suppress-title="false" width="" alt="" title=""
              align="left">
        <artwork height="" name="" width="" type="" alt="" align="left"
                 xml:space="preserve"><![CDATA[
            GET /User/uid=bjensen,dc=example,dc=com HTTP/1.1
            Host: example.com
            Authorization: Bearer h480djs93hd8
                                   ]]></artwork>
      </figure>
      <t>
        The context of the request (i.e. the user for whom data is being
        requested) MUST be inferred by Service Providers.
      </t>

    </section>

    http://www.w3.org/Protocols/rfc2616/rfc2616-sec15.html#sec15
    <section title="Security Considerations" anchor="Security" toc="default">
      <t>
        The SCIM Protocol is based on HTTP and thus subject to the security
        considerations found in Section 15 of<eref
        target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec15.html#sec15">
        RFC2616
      </eref>.

        In recognition that SCIM Resources; e.g., User and Group, contain
        sensitive information Consumers and Service Providers SHOULD require an
        authenticated and TLS protected transport.
      </t>
    </section>

    <section title="API" anchor="api">
      <t>
        The SCIM protocol specifies well known endpoints and operations for
        managing User, Group and Password resources via standard HTTP methods:
      </t>
      <list style="hanging">
        <t hangText="GET">Retrieves a complete or partial Resource
        </t>
        <t hangText="POST">Creates a new Resource
        </t>
        <t hangText="PUT">Modifies a Resource with a complete, consumer
          specified Resource (replace)
        </t>
        <t hangText="PATCH">Modifies a Resource with a set of consumer specified
          changes (partial update) or changes a User password
        </t>
        <t hangText="DELETE">Deletes a Resource.
        </t>
      </list>

      <texttable anchor='endpoint-summary' title="Defined endpoints">
        <ttcol align='left'>Resource</ttcol>
        <ttcol align='left'>Endpoint</ttcol>
        <ttcol align='left'>Operations</ttcol>
        <ttcol align='left'>Description</ttcol>
        <c>User</c>
        <c>/User</c>
        <c><xref target="get-resource" format="default">GET</xref>,
          <xref target="create-resource" format="default">POST</xref>,
          <xref target="edit-resource-with-put" format="default">PUT</xref>,
          <xref target="edit-resource-with-patch" format="default">PATCH</xref>,
          <xref target="delete-resource" format="default">DELETE</xref>
        </c>
        <c>Read/Modify Users</c>

        <c>
          User Query/Listing
        </c>
        <c>/Users</c>
        <c>
          <xref target="query-resources" format="default">GET</xref>
        </c>
        <c>Retrieve User(s) via ad hoc queries</c>
        <c>Group</c>
        <c>/Group</c>
        <c><xref target="get-resource" format="default">GET</xref>,
          <xref target="create-resource" format="default">POST</xref>,
          <xref target="edit-resource-with-put" format="default">PUT</xref>,
          <xref target="edit-resource-with-patch" format="default">PATCH</xref>,
          <xref target="delete-resource" format="default">DELETE</xref>
        </c>
        <c>Read/Modify Groups</c>

        <c>
          User Query/Listing
        </c>
        <c>/Groups</c>
        <c>
          <xref target="query-resources" format="default">GET</xref>
        </c>
        <c>Retrieve Group(s) via ad hoc queries</c>

        <c>Change User Password</c>
        <c>
          /User/{userId}/password
        </c>
        <c>
          <xref target="change-password" format="default">PATCH</xref>
        </c>
        <c>Change a User's password</c>

        <!--<c>Resource Schema</c>-->
        <!--<c>-->
          <!--/Schema-->
        <!--</c>-->
        <!--<c>-->
          <!--<xref target="get-schema" format="default">GET</xref>-->
        <!--</c>-->
        <!--<c>Retrieve a specific schema</c>-->

        <!--<c>Resource Schemas</c>-->
        <!--<c>-->
          <!--/Schemas-->
        <!--</c>-->
        <!--<c>-->
          <!--<xref target="get-schemas" format="default">GET</xref>-->
        <!--</c>-->
        <!--<c>Retrieve all Service Provider supported schemas</c>-->
      </texttable>

      <t>
        All requests to the Service Provider are made via
        <eref
          target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9">
          HTTP operations
        </eref>
        on a URL derived from the Base URL. Responses are returned in the body
        of the HTTP response, formatted as JSON or XML, depending on what is
        requested. Response and error codes SHOULD be transmitted via the HTTP
        status code of the response (if possible), and SHOULD also be specified
        in the body of the response.
      </t>

      <section title="Creating Resources" anchor="create-resource"
               toc="default">
        <t>To create new Resources, clients send POST requests to the Resource
          endpoint; i.e., /User or /Group.
        </t>

        <t>Successful Resource creation is indicated with a 201 ("Created")
          response code. Upon successful creation, the response body MUST
          contain the newly created Resource. Since the server is free to alter
          and/or ignore POSTed content, returning the full representation can be
          useful to the client, enabling it to correlate the client and server
          views of the new Resource.

          When a Resource is created, its URI must be returned in the response
          Location header.
        </t>

        <t>Below, the client sends a POST request containing a User</t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
POST /User  HTTP/1.1
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Length: ...

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "userName":"bjensen",
  "externalId":"bjensen",
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara"
  }
}

                        ]]></artwork>
        </figure>

        <t>The server signals a successful creation with a status code of 201.
          The response includes a Location header indicating the User URI, and a
          representation of that User in the body of the response.
        </t>

        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json
Location: https://example.com/v1/User/uid=bjensen,dc=example,dc=com
ETag: "e180ee84f0671b1"

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "id":"uid=bjensen,dc=example,dc=com",
  "meta":{
    "created":"2011-08-01T21:32:44.882Z",
    "lastModified":"2011-08-01T21:32:44.882Z"
  },
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara"
  },
  "userName":"bjensen"
}
                        ]]></artwork>
        </figure>

      </section>
      <section title="Retrieving Resources" anchor="get-resources-ops"
               toc="default">
        <t>Users and Group Resources are retrieved via opaque, unique URLs or
          via Query. Service Providers MAY choose to respond with a sub-set of
          Resource attributes, though MUST minimally return the Resource id and
          meta attributes.
        </t>

        <section title="Retrieving a known Resource" anchor="get-resource"
                 toc="default">
          <t>To retrieve a known Resource, clients send GET requests to the
            Resource endpoint; e.g., /User/{id} or /Group/{id}.
          </t>

          <t>If the Resource exists the server responds with a status code of
            200 and includes the result in the body of the response.
          </t>

          <t>The below example retrieves a single User via the /User endpoint.
          </t>
          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve">
              <![CDATA[

GET /User/uid=bjensen,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8

                        ]]></artwork>
          </figure>

          <t>The server responds with:
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve">
              <![CDATA[

HTTP/1.1 200 OK
Content-Type: application/json
Location: https://example.com/v1/User/uid=bjensen,dc=example,dc=com
ETag: "f250dd84f0671c3"

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "id":"uid=bjensen,dc=example,dc=com",
  "meta":{
    "created":"2011-08-01T18:29:49.793Z",
    "lastModified":"2011-08-01T18:29:49.793Z"
  },
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara"
  },
  "userName":"bjensen",
  "phoneNumbers":[
    {
      "value":"555-555-8377",
      "type":"work"
    }
  ],
  "emails":[
    {
      "value":"bjensen@example.com",
      "type":"work"
    }
  ]
}
                        ]]></artwork>
          </figure>

        </section>

        <section title="List/Query Resources" anchor="query-resources"
                 toc="default">
          <t>
            SCIM defines a standard set of operations that can be used to
            filter, sort, and paginate response results. The operations are
            specified by adding query parameters to the Resource's endpoint.
            Service Providers MAY support additional query parameters not
            specified here, and Providers SHOULD ignore any query parameters
            they don't recognize.
          </t>

          <t>The below example returns the userName for all Users
          </t>
          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[

GET /Users?attributes=userName
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
                      ]]></artwork>
          </figure>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[

HTTP/1.1 200 OK
Content-Type: application/json

{
  "totalResults":2,
  "schemas":["urn:scim:schemas:core:1.0"],
  "Resources":[
    {
      "userName":"bjensen"
    },
    {
      "userName":"jsmith"
    }
  ]
}                  ]]></artwork>
          </figure>
          <section title="Filtering">
            <t>
              Filtering is OPTIONAL. Consumers may request a subset of Resources
              by specifying the 'filter' URL query parameter containing a filter
              expression. When specified only those Resources matching the
              filter expression SHALL be returned. The expression language that
              is used in the filter parameter supports references to attributes
              and literals. The literal values can be strings enclosed in single
              quotes, numbers and Boolean values; i.e., true or false.
            </t>
            <t>
              The attribute name and attribute operator are case insensitive.
              For example, the following two expressions will evaluate to the
              same logical value:
            </t>
            <figure height="" suppress-title="false" width="" alt="" title=""
                    align="left">
              <artwork height="" name="" width="" type="" alt="" align="left"
                       xml:space="preserve"><![CDATA[
filter=userName Eq 'john'

filter=Username eq 'john'
              ]]></artwork>
            </figure>

            <t>
              The filter parameter MUST contain at least one valid Boolean
              expression. Each expression MUST contain an attribute name
              followed by an attribute operator and optional value. Multiple
              expressions MAY be combined using the two logical operators.
              Furthermore expressions can be grouped together using “()”.
            </t>
            <t>
              The operators supported in the expression are listed in the
              following table.
            </t>

            <texttable anchor='filter-operator-table' title="Attribute
            Operators" alight='left'>
              <ttcol align='left'>Operator</ttcol>
              <ttcol align='left'>Description</ttcol>
              <ttcol align='left'>Behavior</ttcol>
              <c>eq</c>
              <c>equal</c>
              <c>The attribute and operator values must be identical for a
                match.
              </c>

              <c>co</c>
              <c>contains</c>
              <c>The entire operator value must be a substring of the attribute
                value for a match.
              </c>

              <c>sw</c>
              <c>starts with</c>
              <c>The entire operator value must be a substring of the attribute
                value, starting at the beginning of the attribute value. This
                criterion is satisfied if the two strings are identical.
              </c>

              <c>pr</c>
              <c>present (has value)</c>
              <c>If the attribute has a non-empty value, or if it contains a
                non-empty node for complex attributes there is a match.
              </c>

              <c>gt</c>
              <c>greater than</c>
              <c>If the attribute value is greater than operator value, there is
                a match. The actual comparison is dependent on the attribute
                type. For string attribute types, this is a lexicographical
                comparison and for DateTime types, it is a chronological
                comparison.
              </c>

              <c>ge</c>
              <c>greater than or equal</c>
              <c>If the attribute value is greater than or equal to the operator
                value, there is a match. The actual comparison is dependent on
                the attribute type. For string attribute types, this is a
                lexicographical comparison and for DateTime types, it is a
                chronological comparison.
              </c>

              <c>lt</c>
              <c>less than</c>
              <c>If the attribute value is less than operator value, there is a
                match. The actual comparison is dependent on the attribute type.
                For string attribute types, this is a lexicographical comparison
                and for DateTime types, it is a chronological comparison.
              </c>

              <c>lte</c>
              <c>less than or equal</c>
              <c>If the attribute value is less than or equal to the operator
                value, there is a match. The actual comparison is dependent on
                the attribute type. For string attribute types, this is a
                lexicographical comparison and for DateTime types, it is a
                chronological comparison.
              </c>

            </texttable>

            <texttable anchor='logical-operator-table' title="Logical
               Operators" alight='left'>
              <ttcol align='left'>Operator</ttcol>
              <ttcol align='left'>Description</ttcol>
              <ttcol align='left'>Behavior</ttcol>
              <c>and</c>
              <c>Logical And</c>
              <c>The filter is only a match if both expressions evaluate to
                true.
              </c>
              <c>or</c>
              <c>Logical or</c>
              <c>The filter is a match if either expression evaluates to true.
              </c>
            </texttable>
            <texttable anchor='grouping-operator-table' title="Grouping
               Operators">
              <ttcol align='left'>Operator</ttcol>
              <ttcol align='left'>Description</ttcol>
              <ttcol align='left'>Behavior</ttcol>
              <c>()</c>
              <c>Precedence grouping.</c>
              <c>Filter expressions are evaluated from left to right unless the
                expression is enclosed in brackets.
              </c>
            </texttable>
            <t>
              If the specified attribute in a filter expression is a Plural
              attribute, the Resource MUST match if any of the instances of the
              given attribute match the specified criterion (e.g. if a User has
              multiple emails values, only one has to match for the entire User
              to match). For complex attributes, the fully qualified
              Sub-Attribute MUST be specified in the expression using the '.'
              character as separator between the attribute name and the
              Sub-Attribute name. For example, to filter by userName the
              parameter value is userName and to filter by first name, the
              parameter value is name.givenName.
            </t>

            <t>Providers MAY support additional filter operations if they
              choose. Providers MUST decline to filter results if the specified
              filter operation is not recognized and return a HTTP 400 error
              with an appropriate human parseable response. For example, if a
              Consumer specified an unsupported operator named 'regex' the
              Service Provider should specify an error response description
              identifying the Consumer error; e.g., 'The operator 'regex' is not
              supported.'
            </t>

            <t>
              String type attributes are case insensitive by default unless the
              attribute type is defined as a caseExact string. Attribute
              operators ‘eq’, ‘co’, and ‘sw’ MUST perform caseIgnore matching
              for all string attributes unless the attribute is defined as
              caseExact. By default all string attributes are caseIgnore.
            </t>

            <t>Examples:</t>

            <figure height="" suppress-title="false" width="" alt="" title=""
                    align="left">
              <artwork height="" name="" width="" type="" alt="" align="left"
                       xml:space="preserve"><![CDATA[

filter=userName eq 'bjensen'

filter=userName co 'jensen'

filter=userName sw 'J'

filter=title pr

filter=meta.lastModified gt '2011-05-13T04:42:34Z'

filter=meta.lastModified ge '2011-05-13T04:42:34Z'

filter=meta.lastModified lt '2011-05-13T04:42:34Z'

filter=meta.lastModified le '2011-05-13T04:42:34Z'

filter=title pr and userType eq 'Employee'

filter=title pr or userType eq 'Intern'

filter=userType eq 'Employee' and (email co 'example.com' or email
co = 'example.org')
              ]]></artwork>
            </figure>
          </section>

          <section title="Sorting">
            <t>Sort is OPTIONAL. Sorting allows Consumers to specify the order
              in which Resources are returned by specifying a combination of
              sortBy and sortOrder URL parameters.
            </t>
            <list style="hanging">
              <t hangText="sortBy:">
                The sortBy parameter specifies the attribute whose value SHALL
                be used to order the returned responses. If the sortBy attribute
                corresponds to a Singular Attribute, Resources are sorted
                according to that attribute's value; if it's a Plural Attribute,
                Resources are sorted by the value of the primary attribute, if
                any, or else the first value in the list, if any. If the
                attribute is complex the attribute name must be a path to a
                Sub-Attribute; e.g., sortBy=name.givenName. For all attribute
                types, if there is no data for the specified sortBy value they
                are sorted via the 'sortOrder' parameter; i.e., they are ordered
                first if ascending and last if descending.
              </t>
              <t hangText="sortOrder:">
                The order in which the sortBy parameter is applied. Allowed
                values are "ascending" and "descending". If a value for sortBy
                is provided and no sortOrder is specified, the sortOrder SHALL
                default to ascending. Sort order is expected to be
                case-insensitive, Unicode alphabetic sort order, with no
                specific locale implied.
              </t>
            </list>
          </section>

          <section title="Pagination">
            <t>Pagination parameters can be used together to "page through"
              large numbers of Resources so as not to overwhelm the Consumer or
              Service Provider. Pagination is not session based hence Consumers
              SHOULD never assume repeatable results. For example, a request for
              a list of 10 Resources beginning with a startIndex of 1 may return
              different results when repeated as a Resource in the original
              result could be deleted or new ones could be added in-between
              requests. Pagination parameters and general behavior are derived
              from the
              <eref
                target="http://www.opensearch.org/Specifications/OpenSearch/1.1">
                OpenSearch Protocol
              </eref>.
            </t>

            <t>The following table describes the URL pagination parameters.
            </t>

            <texttable anchor='consumer-pagination-options-table'
                       title="Pagination Request parameters">
              <ttcol align='left'>Parameter</ttcol>
              <ttcol align='left'>Description</ttcol>
              <ttcol align='left'>Default</ttcol>
              <c>startIndex</c>
              <c>The 1-based index of the first search result.
              </c>
              <c>1</c>
              <c>count</c>
              <c>Non-negative Integer. Specifies the desired maximum number of
                search results per page; e.g., 10.
              </c>
              <c>None. When specified the Service Provider MUST not return more
                results than specified though MAY return fewer results. If
                unspecified, the maximum number of results is set by the Service
                Provider.
              </c>
            </texttable>

            <t>The following table describes the query response pagination
              attributes specified by the Service Provider.
            </t>

            <texttable anchor='response-pagination-options-table'
                       title="Pagination Response Elements">
              <ttcol align='left'>Element</ttcol>
              <ttcol align='left'>Description</ttcol>
              <c>itemsPerPage</c>
              <c>Non-negative Integer. Specifies the number of search results
                returned in a query response page; e.g., 10.
              </c>
              <c>totalResults</c>
              <c>Non-negative Integer. Specifies the total number of results
                matching the Consumer query; e.g., 1000.
              </c>
              <c>startIndex</c>
              <c>The 1-based index of the first result in the current set of
                search results; e.g., 1.
              </c>
            </texttable>

            <t>
              For example, to retrieve the first 10 Users set the startIndex to
              1 and the count to 10.

              <figure height="" suppress-title="false" width="" alt="" title=""
                      align="left">
                <artwork height="" name="" width="" type="" alt="" align="left"
                         xml:space="preserve"><![CDATA[

GET /Users?startIndex=1&count=10
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
                      ]]></artwork>
              </figure>

              <figure height="" suppress-title="false" width="" alt="" title=""
                      align="left">
                <artwork height="" name="" width="" type="" alt="" align="left"
                         xml:space="preserve"><![CDATA[
{
  "totalResults":100,"itemsPerPage":10,"startIndex":1,
  "schemas":["urn:scim:schemas:core:1.0"],
  "Resources":[{
    ...
  }]
}
                                ]]></artwork>
              </figure>
              Given the example above, to continue paging set the startIndex to
              11 and re-fetch; i.e., /Users?startIndex=11&amp;count=10
            </t>
          </section>
        </section>
      </section>
      <section title="Modifying Resources" toc="default">
        <t>Resources can be modified in whole or in part via PUT or PATCH,
          respectively. Implementers MUST support PUT as specified in
          <eref
            target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6">
            RFC2616
          </eref>
          . Resources such as Groups may be very large hence implementers SHOULD
          support
          <eref target="http://tools.ietf.org/html/rfc5789">PATCH
          </eref>
          to enable partial resource modifications.
        </t>
        <section title="Modifying with PUT" anchor="edit-resource-with-put"
                 toc="default">
          <t>
            PUT performs a full update. Consumers must retrieve the entire
            Resource and PUT the desired modifications as the operation
            overwrites all previously stored data. Unless otherwise specified a
            successful PUT operation returns a 200 OK response code and the
            entire Resource within the response body.

            Example:
          </t>
          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PUT /User/uid=bjensen,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "id":"uid=bjensen,dc=example,dc=com",
  "userName":"bjensen",
  "externalId":"bjensen",
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara",
    "middleName":"Jane"

  },
  "emails":[
    {
        "value":"bjensen@example.com"
    },
    {
        "value":"babs@jensen.org"
    }
  ]
}


                       ]]></artwork>
          </figure>
          <t>
            The service responds with the entire, updated User
          </t>
          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[

HTTP/1.1 200 OK
Content-Type: application/json
Authorization: Bearer h480djs93hd8
ETag: "b431af54f0671a2"
Location:"https://example.com/v1/User/uid=bjensen,dc=example,dc=com"
{
  "schemas":["urn:scim:schemas:core:1.0"],
  "id":"uid=bjensen,dc=example,dc=com",
  "userName":"bjensen",
  "externalId":"bjensen",
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara",
    "middleName":"Jane"

  },
  "emails":[
    {
        "value":"bjensen@example.com"
    },
    {
        "value":"babs@jensen.org"
    }
  ],
  "meta": {
    "created":"2011-08-08T04:56:22Z",
    "lastModified":"2011-08-08T08:00:12Z",
    "location":"https://example.com/v1/User/uid=bjensen,dc=example,dc=com",
    "version":"b431af54f0671a2"
  }
}
               ]]></artwork>
          </figure>
        </section>

        <section title="Modifying with PATCH" anchor="edit-resource-with-patch"
                 toc="default">
          <t>PATCH enables consumers to send only those attributes requiring
            modification reducing network and processing overhead. Attributes
            may be deleted, replaced or added in a single request.

            TBD.

          </t>


        </section>
      </section>
      <section title="Deleting Resources" anchor="delete-resource"
               toc="default">
        <t>Consumers request Resource removal via DELETE. Service Providers MAY
          choose not to permanently delete the Resource, but MUST return a 404
          error code for all operations associated with the previously deleted
          Id. Service Providers MUST also omit the Resource from future query
          results.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[

DELETE /User/uid=bjensen,dc=example,dc=com
Host: example.com
Authorization: Bearer h480djs93hd8
ETag: "c310cd84f0281b7"

                                      ]]></artwork>
        </figure>

        Server Response:
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
HTTP/1.1 200 OK
            ]]></artwork>
        </figure>


        <t>Example: Consumer attempt to retrieve the previously deleted User</t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[

GET /User/uid=bjensen,dc=example,dc=com
Host: example.com
Authorization: Bearer h480djs93hd8
                                      ]]></artwork>
        </figure>

        Server Response:
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
HTTP/1.1 404 NOT FOUND

{
  "Errors":[
    {
      "description":"Resource uid=bjensen,dc=example,dc=com not found",
      "code":"404"
    }
  ]
}

            ]]></artwork>
        </figure>

      </section>
      <section title="Change password" anchor="change-password" toc="default">
        <t>Consumers request User password change via PATCH. The change password
          operation is OPTIONAL, hence Service Providers MAY choose not to honor
          the request.

          Since a password is a facet of the User the User endpoint is
          overloaded; i.e., /User/{id}/password. The consumer MUST specify the
          attribute 'password' in the request body and MUST not specify any
          other attributes. If successful the Service Provider MUST return a 204
          response code and no content within the response body.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[

PATCH /User/uid=bjensen,dc=example,dc=com/password
Host: example.com
Authorization: Bearer h480djs93hd8

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "password":"t1meMa$heen",
}

]]></artwork>
        </figure>

        Server Response:
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
HTTP/1.1 204 OK
            ]]></artwork>
        </figure>
      </section>

      <section title="Retrieving Service Provider Schema" anchor="schemas"
               toc="default">
        <t>TBD</t>

      </section>


      <section title="Data Input/Output Formats" anchor="io-format">
        <t>
          Consumers SHOULD specify the format in which the data is submitted and
          MAY specify the desired response data format. Consumers MAY indicate
          the desired format via an HTTP Accept Header; e.g.,"Accept:
          application/json" or via URI suffix; e.g.,

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve">
              <![CDATA[
GET /User/uid=bjensen,dc=example,dc=com.json
Host: example.com

GET /User/uid=bjensen,dc=example,dc=com.xml
Host: example.com
            ]]></artwork>
          </figure>

        </t>

        <t>
          Service Providers MUST support the Accept Headers "Accept:
          application/json" for
          <eref target="http://json.org">JSON</eref>
          and "Accept: application/xml" for
          <eref target="http://www.w3.org/XML/">XML</eref>
          and MAY support additional formats if desired. The format defaults to
          JSON if no format is specified. The data structure returned is
          equivalent in both formats; the only difference is in the encoding of
          the data.
        </t>
        <t>
          Singular attributes are encoded as string key/value pairs in JSON;
          e.g.,
        </t>
        <figure>
          <artwork><![CDATA[
"attribute": "value"
                    ]]></artwork>
        </figure>
        <t>and tags with text content in XML; e.g.,</t>
        <figure>
          <artwork><![CDATA[
<attribute>value</attribute>
                    ]]></artwork>
        </figure>
        <t>
          Plural attributes and Plural Bundles are encoded as arrays in JSON;
          e.g.,
        </t>
        <figure>
          <artwork><![CDATA[
"attributes": [ "value1", "value2" ]
                    ]]></artwork>
        </figure>
        <t>
          and repeated tags in XML; e.g.,
        </t>
        <figure>
          <artwork><![CDATA[
<attributes>value1</attributes>
<attributes>value2</attributes>
                    ]]></artwork>
        </figure>
        <t>
          Nodes with multiple sub-nodes are represented as objects in JSON; e.g,
        </t>
        <figure>
          <artwork><![CDATA[
"attribute": { "subattribute1": "value1", "subattribute2": "value2" }
                    ]]></artwork>
        </figure>
        <t>
          and repeated tags in XML; e.g.,
        </t>
        <figure>
          <artwork><![CDATA[
<attribute>
  <subattribute1>value1</subattribute1>
  <subattribute2>value2</subattribute2>
</attribute>
                    ]]></artwork>
        </figure>
      </section>

      <section title="Additional retrieval query parameters" toc="default">
        <t>
          Consumers MAY request a partial Resource representation on any
          operation that returns a Resource within the response by specifying
          the URL query parameter 'attributes'. When specified, each Resource
          returned SHALL contain the minimal set of Resource attributes and, at
          the Service Providers discretion, the attributes explicitly requested.

          The query parameter attributes value is a comma separated list of
          Resource attribute names (e.g. userName, name, emails). Extended
          schema attribute names must be prefixed with the attribute name's
          fully qualified URN separated by a colon (':'). For example, an
          extended schema name-spaced as 'urn:hr:schemas:user with the simple
          attribute 'age' is fully encoded as 'urn:hr:schemas:user:age'.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
GET /User/uid=bjensen,dc=example,dc=com?attributes=displayName
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8

                    ]]></artwork>
        </figure>
        <t>Giving the response</t>

        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[

HTTP/1.1 200 OK
Content-Type: application/json
Location: https://example.com/v1/User/uid=bjensen,dc=example,dc=com
ETag: "a330bc54f0671c9"

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "id":"uid=bjensen,dc=example,dc=com",
  "meta":{
    "created":"2011-08-01T18:29:49.793Z",
    "lastModified":"2011-08-01T18:29:49.793Z",
    "location":"https://example.com/v1/User/uid=bjensen,dc=example,dc=com"
  }
}

                        ]]></artwork>
        </figure>

      </section>


      <section title="HTTP Response Codes">
        <t>
          The SCIM Protocol uses the response
          <eref
            target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">
            status codes defined in HTTP
          </eref>
          to indicate operation success or failure. In addition to returning a
          HTTP response code implementers MUST return the errors in the body of
          the response in the client requested format containing the error
          response and, per the HTTP specification, human-readable explanations.
          Implementers SHOULD handle the identified errors as described below.
        </t>

        <texttable anchor='http-error-handling-table'
                   title="Defined error cases">
          <ttcol align='left'>Code</ttcol>
          <ttcol align='left'>Applicability</ttcol>
          <ttcol align='left'>Suggested Explanation</ttcol>
          <c>400 BAD REQUEST</c>
          <c>GET,POST,PUT,PATCH,DELETE</c>
          <c>Request is unparseable, syntactically incorrect, or violates schema
          </c>
          <c>401 UNAUTHORIZED</c>
          <c>GET,POST,PUT,PATCH,DELETE</c>
          <c>Authorization failure</c>
          <c>403 FORBIDDEN</c>
          <c>GET,POST,PUT,PATCH,DELETE</c>
          <c>Server does not support requested operation</c>
          <c>404 NOT FOUND</c>
          <c>GET,PUT,PATCH,DELETE</c>
          <c>Specified resource; e.g., User, does not exist</c>
          <c>409 CONFLICT</c>
          <c>PUT,PATCH,DELETE</c>
          <c>The specified version number does not match the resource's latest
            version number or a Service Provider refused to create a new,
            duplicate resource
          </c>
          <c>412 PRECONDITION FAILED</c>
          <c>PUT,PATCH</c>
          <c>Failed to update as Resource {id} changed on the server since you
            last retrieved it
          </c>
          <c>500 INTERNAL SERVER ERROR</c>
          <c>GET,POST,PUT,PATCH,DELETE</c>
          <c>An internal error. Implementers SHOULD provide descriptive
            debugging advice
          </c>
          <c>501 NOT IMPLEMENTED</c>
          <c>GET,POST,PUT,PATCH,DELETE</c>
          <c>Service Provider does not support the request operation; e.g.,
            PATCH
          </c>
        </texttable>

        <t>Error example in response to a non-existent GET request.</t>

        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[

HTTP/1.1 404 NOT FOUND

{
  "Errors":[
    {
      "description":"Resource uid=babs not found",
      "code":"404"
    }
  ]
}
              ]]></artwork>
        </figure>
      </section>

      <section title="Versioning Resources" anchor="etags">
        <t>
          The API supports resource versioning via standard,<eref
          target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19">
          HTTP ETags</eref>. Service providers MAY support both weak and strong
          ETags as the preferred mechanism for performing conditional retrievals
          and ensuring Consumers do not inadvertently overwrite each others
          changes, respectively. When supported SCIM ETags MUST be specified as
          an HTTP header and SHOULD be specified as an attribute within a
          Resource's 'meta' structure.
        </t>

        <t>Example</t>

        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
POST /User  HTTP/1.1
Host: example.com
Content-Type:  application/json
Authorization: Bearer h480djs93hd8
Content-Length: ...

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "userName":"bjensen",
  "externalId":"bjensen",
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara"
  }
}
                        ]]></artwork>
        </figure>

        <t>The server responds with an ETag in the response header and meta
          structure.
        </t>

        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json
Location: https://example.com/v1/User/uid=bjensen,dc=example,dc=com
ETag: "e180ee84f0671b1"

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "id":"uid=bjensen,dc=example,dc=com",
  "meta":{
    "created":"2011-08-01T21:32:44.882Z",
    "lastModified":"2011-08-01T21:32:44.882Z",
    "location":"https://example.com/v1/User/uid=bjensen,dc=example,dc=com"
  },
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara"
  },
  "userName":"bjensen"
}
                        ]]></artwork>
        </figure>
        <t>With the returned ETag, Consumers can choose to retrieve the Resource
          only if the Resource has been modified. In addition, if updating,
          specifying an ETag guarantees that previous updates will not be
          overwritten. Note: Per the HTTP specification the ETag value is
          quoted.
        </t>

        <t>Conditional retrieval example using
          <eref
            target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26">
            If-None-Match
          </eref>
          header:
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
GET /User/uid=bjensen,dc=example,dc=com?attributes=displayName
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
If-None-Match: "e180ee84f0671b1"

                ]]></artwork>
        </figure>

        <t>
          If the Resource has not changed the Service Provider simply returns an
          empty body with a 304 "Not Modified" response code.
        </t>
        <t>
          Similarly, consumers may supply an
          <eref
            target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24">
            If-Match
          </eref>
          ETag header for PUT, PATCH, and DELETE operations to ensure that the
          requested operation succeeds only if the supplied ETag matches the
          latest Service Provider Resource; e.g., If-Match: "e180ee84f0671b1"
        </t>

        <t>
          To perform DELETE, PATCH, or PUT operations and override ETag
          versioning specify
          <eref
            target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24">
            "If-Match: *"
          </eref>
          in lieu of an ETag header.
        </t>
      </section>
      <section title="HTTP Method Overloading">
        <t>In recognition that some clients, servers and firewalls prevent PUT,
          PATCH and DELETE operations a client MAY override the POST operation
          by specifying the custom header "X-HTTP-Method-Override" with the
          intended PUT, PATCH, DELETE operation. For example:
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
POST /User/uid=bjensen,dc=example,dc=com
X-HTTP-Method-Override: DELETE
]]></artwork>
        </figure>
      </section>
    </section>
    <section title="Acknowledgments">
      <t>Portable Contacts -
        <eref target="http://www.portablecontacts.net/draft-spec.html"
              type="HTML">Portable Contacts 1.0 Draft C
        </eref>
      </t>
    </section>
  </middle>
</rfc>